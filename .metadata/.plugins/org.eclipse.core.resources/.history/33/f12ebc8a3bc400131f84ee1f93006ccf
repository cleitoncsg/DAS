package Refatoracao2_1aParte;

import java.util.Enumeration;
import java.util.Vector;

import Refatoracao2_1aParte_FeitoEmSala.CPF;
import Refatoracao2_1aParte_FeitoEmSala.Deducao;
import Refatoracao2_1aParte_FeitoEmSala.Dependente;
import Refatoracao2_1aParte_FeitoEmSala.Rendimento;


public class Contribuinte {

	private String nome; 
	CPF cpf;
	float totalRendimentos, totalRendimentosTributaveis, totalRendimentosIsentos;
	float totalDeducoes; 
	float baseDeCalculo;
	float valor1aFaixa = 0, 
	              valor2aFaixa = 0, 
	              valor3aFaixa = 0, 
	              valor4aFaixa = 0, 
	              valor5aFaixa = 0;
	Vector<Rendimento> rendimentos;
	Vector<Deducao> deducoes; 
	
	public Contribuinte(String nome, int[] cpf) {
		this.nome = nome; 
		this.cpf = new CPF(cpf);
		this.rendimentos = new Vector<Rendimento>();
		this.deducoes = new Vector<Deducao>();
	}
	

	public float calcularImposto() {
		
		calcularRendimentos();
		
		return new ContribuinteTributo(this).computarTributo();
		
	}


	private void calcularRendimentos() {
		totalRendimentos = 0; 
		totalRendimentosTributaveis = 0; 
		totalRendimentosIsentos = 0;
		
		Enumeration<Rendimento> r  = rendimentos.elements();
		while (r.hasMoreElements()) {
			Rendimento temp = (Rendimento) r.nextElement();
			totalRendimentos += temp.getValor(); 
			if (temp.isTributavel())
				totalRendimentosTributaveis += temp.getValor(); 
			else
				totalRendimentosIsentos += temp.getValor();
		}
	}
	
	public boolean adicionarRendimento(Rendimento rendimento) {
		boolean resposta = rendimentos.add(rendimento);
		calcularImposto();
		return resposta;
	}
	
	
	public boolean excluirRendimento(Rendimento rendimento){
		
		boolean resposta = false;
		
		Enumeration<Rendimento> e = rendimentos.elements();
		while (e.hasMoreElements()){  
			Rendimento temp = e.nextElement();
			if (temp.getDescricao() == rendimento.getDescricao() &&  
				temp.getValor() == rendimento.getValor()) {
				resposta = rendimentos.remove(temp); 
			}
		}	
		calcularImposto();
		return resposta; 
	}
	
	
	public boolean adicionarDeducao(Deducao deducao) {
		boolean resposta = deducoes.add(deducao);
		calcularImposto();
		return resposta; 
	}
	
	
	public boolean excluirDeducao(Deducao deducao){
		boolean resposta = false; 
		Enumeration<Deducao> e = deducoes.elements();
		
		while (e.hasMoreElements()){
			Deducao deducao1 = e.nextElement();
			
			if (deducao1.getDescricao() == deducao.getDescricao() && 
			    deducao1.getValor() == deducao.getValor()){  
				if (deducao1.getClass().getName().equals(Dependente.class.getName())) {  
					Dependente dependente; 
					dependente = (Dependente) deducao1;  
					
				}
				
				resposta = deducoes.remove(deducao1);
			}
			
		}
		
		calcularImposto();
		return resposta;
	}


	public float getTotalRendimentos() {
		return totalRendimentos;
	}

	public float getTotalRendimentosTributaveis() {
		return totalRendimentosTributaveis;
	}
	
	public float getTotalRendimentosIsentos() {
		return totalRendimentosIsentos;
	}

	public double getTotalDeducoes() {
		return totalDeducoes;
	}
	
	public double getBaseDeCalculo() {
		return baseDeCalculo;
	}

	public float getValor1aFaixa() {
		return valor1aFaixa;
	}

	public float getValor2aFaixa() {
		return valor2aFaixa;
	}

	public float getValor3aFaixa(){
		return valor3aFaixa;
	}
	

	public float getValor4aFaixa() {
		return valor4aFaixa;
	}

	public float getValor5aFaixa() {
		return valor5aFaixa;
	}
}
