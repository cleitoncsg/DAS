package Refatoracao_Cleiton;
import java.util.Enumeration;
import java.util.Vector;


public class Contribuinte {

	private String nome; 
	//private int[] cpf;
	CPF cpf;
	private float totalRendimentos, totalRendimentosTributaveis, totalRendimentosIsentos;
	private float totalDeducoes; 
	private float baseDeCalculo;
	private float valor1aFaixa, 
	              valor2aFaixa, 
	              valor3aFaixa, 
	              valor4aFaixa, 
	              valor5aFaixa;
	private Vector<Rendimento> rendimentos;
	private Vector<Deducao> deducoes; 
	
	public Contribuinte(String nome, int[] cpf) {
		this.nome = nome; 
		//this.cpf = cpf;
		this.cpf = new CPF(cpf);
		this.rendimentos = new Vector<Rendimento>();
		this.deducoes = new Vector<Deducao>();
	}
	

	public float calcularImposto() {
		
		calcularRendimentos();
	
		totalDeducoes = 0; 
		
		Enumeration<Deducao> d = deducoes.elements();
		while (d.hasMoreElements()) {
			Deducao temp = d.nextElement();
			totalDeducoes += temp.getValor();
		}
		
		baseDeCalculo = totalRendimentos - totalDeducoes; 
		
		float temp = baseDeCalculo - (float)4271.59; 
		if (temp > 0) 
			valor5aFaixa = temp * (float)0.275;
		else {
			valor5aFaixa = 0;
			temp = 0; 
		}
		temp = baseDeCalculo - (float)3418.60;
		if (temp > 0){
			if (baseDeCalculo > 4271.59) 
				temp = (float)4271.59 - (float)3418.60; 
			valor4aFaixa = temp * (float)0.225;
		}			 
		else {
			valor4aFaixa = 0;
			temp = 0;
		}
		temp = baseDeCalculo - (float) temp - (float)2563.92;
		if (temp > 0){
			if (baseDeCalculo > 3418.60) 
				temp = (float)3418.60 - (float)2563.92;
			valor3aFaixa = temp * (float)0.15;
		} 
		else {
			valor3aFaixa = 0;
			temp = 0;
		}
		
		temp = baseDeCalculo - (float)1710.79;
		if (temp > 0){
			if (baseDeCalculo > 2563.91) 
				temp = (float)2563.91 - (float)1710.79; 
			valor2aFaixa = temp * (float)0.075;
		}
		else {
			valor2aFaixa = 0;
			temp = 0;
		}

		temp = baseDeCalculo - (float)1710.79;
		if (temp <= 0)
			valor1aFaixa = temp * 0; 
		else {
			valor1aFaixa = 0;
			temp = 0;
		}
		
		temp = valor5aFaixa + valor4aFaixa + valor3aFaixa + valor2aFaixa + valor1aFaixa;
		
		return temp;
		
	}


	private void calcularRendimentos() {
		totalRendimentos = 0; 
		totalRendimentosTributaveis = 0; 
		totalRendimentosIsentos = 0;
		
		Enumeration<Rendimento> r  = rendimentos.elements();
		while (r.hasMoreElements()) {
			Rendimento rendimento = (Rendimento) r.nextElement();
			totalRendimentos += rendimento.getValor(); 
			if (rendimento.isTributavel())
				totalRendimentosTributaveis += rendimento.getValor(); 
			else
				totalRendimentosIsentos += rendimento.getValor();
		}
	}
	
	public boolean adicionarRendimento(Rendimento rendimento) {
		boolean resposta = rendimentos.add(rendimento);
		calcularImposto();
		return resposta;
	}
	
	
	public boolean excluirRendimento(Rendimento rendimento){
		
		boolean resposta = false;
		
		Enumeration<Rendimento> e = rendimentos.elements();
		while (e.hasMoreElements()){  
			Rendimento rendimento1 = e.nextElement();
			if (rendimento1.getDescricao() == rendimento.getDescricao() &&  
				rendimento1.getValor() == rendimento.getValor()) {
				resposta = rendimentos.remove(rendimento1); 
			}
		}	
		calcularImposto();
		return resposta; 
	}
	
	
	public boolean adicionarDeducao(Deducao deducao) {
		boolean resposta = deducoes.add(deducao);
		calcularImposto();
		return resposta; 
	}
	
	
	public boolean excluirDeducao(Deducao deducao){
		boolean resposta = false; 
		Enumeration<Deducao> e = deducoes.elements();
		
		while (e.hasMoreElements()){
			Deducao deducao1 = e.nextElement();
			
			if (deducao1.getDescricao() == deducao.getDescricao() && 
			    deducao1.getValor() == deducao.getValor()){  
				if (deducao1.getClass().getName().equals(Dependente.class.getName())) {  
					
					Dependente dependente1, dependente2; 
					dependente1 = (Dependente) deducao1; 
					dependente2 = (Dependente) deducao; 
				
				} 
				resposta = deducoes.remove(deducao1);
			} 
		}
		
		calcularImposto();
		return resposta;
	}


	public float getTotalRendimentos() {
		return totalRendimentos;
	}


	public float getTotalRendimentosTributaveis() {
		return totalRendimentosTributaveis;
	}
	
	public float getTotalRendimentosIsentos() {
		return totalRendimentosIsentos;
	}


	public double getTotalDeducoes() {
		return totalDeducoes;
	}
	
	public double getBaseDeCalculo() {
		return baseDeCalculo;
	}


	public float getValor1aFaixa() {
		return valor1aFaixa;
	}


	public float getValor2aFaixa() {
		return valor2aFaixa;
	}


	public float getValor3aFaixa() {
		return valor3aFaixa;
	}


	public float getValor4aFaixa() {
		return valor4aFaixa;
	}


	public float getValor5aFaixa() {
		return valor5aFaixa;
	}
	
	
}
