package Refatoracao2_1aParte;
import java.util.Enumeration;
import java.util.Vector;


public class Contribuinte {

	private String nome; 
	//private int[] cpf;
	CPF cpf;
	private float totalDeducoes; 
	private ContribuiteTributo ct = new ContribuiteTributo(0, 0, 0, 0, 0);

	public Contribuinte(String nome, int[] cpf) {
		this.nome = nome; 
		//this.cpf = cpf;
		this.cpf = new CPF(cpf);
		this.ct.rendimentos = new Vector<Rendimento>();
		this.ct.deducoes = new Vector<Deducao>();
	}
	

	public float calcularImposto() {
		
		calcularRendimentos();
		
		return new ContribuiteTributo().calculoTributo();
		
	}


	private void calcularRendimentos() {
		//1a PARTE: CALCULOS DOS RENDIMENTOS TRIBUTAVEIS
		ct.totalRendimentos = 0; 
		ct.totalRendimentosTributaveis = 0; 
		ct.totalRendimentosIsentos = 0;
		
		//calculo o total de rendimentos, rendimentos tribut�veis e rendimentos isentos
		Enumeration<Rendimento> r  = ct.rendimentos.elements();
		while (r.hasMoreElements()) {
			Rendimento temp = (Rendimento) r.nextElement();
			ct.totalRendimentos += temp.getValor(); 
			if (temp.isTributavel())
				ct.totalRendimentosTributaveis += temp.getValor(); 
			else
				ct.totalRendimentosIsentos += temp.getValor();
		}
	}
	
	public boolean adicionarRendimento(Rendimento rendimento) {
		boolean resposta = ct.rendimentos.add(rendimento);
		calcularImposto();
		return resposta;
	}
	
	
	public boolean excluirRendimento(Rendimento rendimento){
		
		boolean resposta = false;
		
		Enumeration<Rendimento> e = ct.rendimentos.elements();
		while (e.hasMoreElements()){  //percorre o vetor varrendo os elementos
			Rendimento temp = e.nextElement();
			if (temp.getDescricao() == rendimento.getDescricao() &&  //se os elementos forem iguais ...
				temp.getValor() == rendimento.getValor()) {
				resposta = ct.rendimentos.remove(temp); //... excluo o elemento do vetor
			}
		}	
		calcularImposto();
		return resposta; 
	}
	
	
	public boolean adicionarDeducao(Deducao deducao) {
		boolean resposta = ct.deducoes.add(deducao);
		calcularImposto();
		return resposta; 
	}
	
	
	public boolean excluirDeducao(Deducao deducao){
		boolean resposta = false; 
		Enumeration<Deducao> e = ct.deducoes.elements();
		
		while (e.hasMoreElements()){
			Deducao temp = e.nextElement();
			
			if (temp.getDescricao() == deducao.getDescricao() && 
			    temp.getValor() == deducao.getValor()){  // se descricao e valor s�o iguais...
				if (temp.getClass().getName().equals(Dependente.class.getName())) {  //...verifique se o objeto � da classe DEPENDENTE ... 
					//... se forem da classe dependente, certifique se ambos objetos referem-se ao mesmo dependente.
					Dependente temp2, temp3; 
					temp2 = (Dependente) temp; 
					temp3 = (Dependente) deducao; 
					
					if (temp2.getNome().equals(temp3.getNome())) {
						resposta = ct.deducoes.remove(temp);
					}
				} else {
					resposta = ct.deducoes.remove(temp);
				}
			} 
		}
		
		calcularImposto();
		return resposta;
	}


	public float getTotalRendimentos() {
		return ct.totalRendimentos;
	}


	public float getTotalRendimentosTributaveis() {
		return ct.totalRendimentosTributaveis;
	}
	
	public float getTotalRendimentosIsentos() {
		return ct.totalRendimentosIsentos;
	}


	public double getTotalDeducoes() {
		return totalDeducoes;
	}
	
	public double getBaseDeCalculo() {
		return ct.baseDeCalculo;
	}


	public float getValor1aFaixa() {
		return ct.valor1aFaixa;
	}


	public float getValor2aFaixa() {
		return ct.valor2aFaixa;
	}


	public float getValor3aFaixa() {
		return ct.valor3aFaixa;
	}


	public float getValor4aFaixa() {
		return ct.valor4aFaixa;
	}


	public float getValor5aFaixa() {
		return ct.valor5aFaixa;
	}
	
	
}
