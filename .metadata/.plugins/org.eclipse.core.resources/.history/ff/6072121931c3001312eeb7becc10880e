package Refatoracao_1;

import java.util.Enumeration;
import java.util.Vector;

public class CalculoDeImposto {
	public float totalRendimentos;
	public float totalRendimentosTributaveis;
	public float totalRendimentosIsentos;
	public float totalDeducoes;
	public float baseDeCalculo;
	public float valor1aFaixa;
	public float valor2aFaixa;
	public float valor3aFaixa;
	public float valor4aFaixa;
	public float valor5aFaixa;
	public Vector<Rendimento> rendimentos;
	public Vector<Deducao> deducoes;

	public CalculoDeImposto() {
	}
	
	public CalculoDeImposto(Contribuinte contribuinte){
calcularRendimentos();
		
		//2a PARTE: CALCULOS DAS DEDUCOES
		Contribuinte.calculoDeImposto.totalDeducoes = 0; 
		
		Enumeration<Deducao> d = Contribuinte.calculoDeImposto.deducoes.elements();
		while (d.hasMoreElements()) {
			Deducao temp = d.nextElement();
			Contribuinte.calculoDeImposto.totalDeducoes += temp.getValor();
		}
		
		//3a PARTE: CALCULO DA BASE DE CALCULO DO IRPF
		Contribuinte.calculoDeImposto.baseDeCalculo = Contribuinte.calculoDeImposto.totalRendimentos - Contribuinte.calculoDeImposto.totalDeducoes; 
		
		//4a PARTE: CALCULO DO IMPOSTO DEVIDO, FAIXA A FAIXA E TOTAL.
		//Testa se a base de calculo � aplic�vel a cada faixa... 
		//5a faixa: aplicavel se a base de calculo for maior que R$4271,59
		float temp = Contribuinte.calculoDeImposto.baseDeCalculo - (float)4271.59; //para calcular o valor que ultrapassou o limite da quinta faixa
		if (temp > 0) 
			Contribuinte.calculoDeImposto.valor5aFaixa = temp * (float)0.275;
		else {
			Contribuinte.calculoDeImposto.valor5aFaixa = 0;
			temp = 0; 
		}
		
		//4a faixa: aplicavel se a base de calculo for maior ou igual a R$3418,60 e menor que R$ 4271,59
		temp = Contribuinte.calculoDeImposto.baseDeCalculo - (float)3418.60;
		if (temp > 0){
			if (Contribuinte.calculoDeImposto.baseDeCalculo > 4271.59) 
				temp = (float)4271.59 - (float)3418.60; 
			Contribuinte.calculoDeImposto.valor4aFaixa = temp * (float)0.225;
		}			 
		else {
			Contribuinte.calculoDeImposto.valor4aFaixa = 0;
			temp = 0;
		}
		
		//3a faixa: aplicavel se a base de calculo for maior ou igual a R$2563,92 e menor que R$ 3418,60
		temp = Contribuinte.calculoDeImposto.baseDeCalculo - (float) temp - (float)2563.92;
		if (temp > 0){
			if (Contribuinte.calculoDeImposto.baseDeCalculo > 3418.60) 
				temp = (float)3418.60 - (float)2563.92;
			Contribuinte.calculoDeImposto.valor3aFaixa = temp * (float)0.15;
		} 
		else {
			Contribuinte.calculoDeImposto.valor3aFaixa = 0;
			temp = 0;
		}
		//2a faixa: aplicavel se a base de calculo for maior ou igual a R$1710,79 e menor que R$ 2563,91
		temp = Contribuinte.calculoDeImposto.baseDeCalculo - (float)1710.79;
		if (temp > 0){
			if (Contribuinte.calculoDeImposto.baseDeCalculo > 2563.91) 
				temp = (float)2563.91 - (float)1710.79; 
			Contribuinte.calculoDeImposto.valor2aFaixa = temp * (float)0.075;
		}
		else {
			Contribuinte.calculoDeImposto.valor2aFaixa = 0;
			temp = 0;
		}
		//1a faixa: aplicavel se a base de calculo for menor que R$1710,79
		temp = Contribuinte.calculoDeImposto.baseDeCalculo - (float)1710.79;
		if (temp <= 0)
			Contribuinte.calculoDeImposto.valor1aFaixa = temp * 0; 
		else {
			Contribuinte.calculoDeImposto.valor1aFaixa = 0;
			temp = 0;
		}
		
		temp = Contribuinte.calculoDeImposto.valor5aFaixa + Contribuinte.calculoDeImposto.valor4aFaixa + Contribuinte.calculoDeImposto.valor3aFaixa + Contribuinte.calculoDeImposto.valor2aFaixa + Contribuinte.calculoDeImposto.valor1aFaixa;
		
		//4a faixa: aplicavel se a base de calculo for maior ou igual a R$3418,60 e menor que R$4271,79
		
		return temp;
		
	}


	private void calcularRendimentos() {
		//1a PARTE: CALCULOS DOS RENDIMENTOS TRIBUTAVEIS
		Contribuinte.calculoDeImposto.totalRendimentos = 0; 
		Contribuinte.calculoDeImposto.totalRendimentosTributaveis = 0; 
		Contribuinte.calculoDeImposto.totalRendimentosIsentos = 0;
		
		//calculo o total de rendimentos, rendimentos tribut�veis e rendimentos isentos
		Enumeration<Rendimento> r  = Contribuinte.calculoDeImposto.rendimentos.elements();
		while (r.hasMoreElements()) {
			Rendimento temp = (Rendimento) r.nextElement();
			Contribuinte.calculoDeImposto.totalRendimentos += temp.getValor(); 
			if (temp.isTributavel())
				Contribuinte.calculoDeImposto.totalRendimentosTributaveis += temp.getValor(); 
			else
				Contribuinte.calculoDeImposto.totalRendimentosIsentos += temp.getValor();
		}
	}
	
	public boolean adicionarRendimento(Rendimento rendimento) {
		boolean resposta = Contribuinte.calculoDeImposto.rendimentos.add(rendimento);
		calcularImposto();
		return resposta;
	}
}